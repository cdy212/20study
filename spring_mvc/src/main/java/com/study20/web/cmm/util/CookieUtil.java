package com.study20.web.cmm.util;import java.net.URLDecoder;import java.net.URLEncoder;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.web.util.CookieGenerator;/** * 쿠키 * 쿠키 값 중 일부 특수문자는 허용 안하여 밸류 값을 별도로 인코딩 함(URLDecoder로 value 값 디코딩 -UTF-8) * @category 유틸  * @author cdy */public class CookieUtil {	private static final Log log = LogFactory.getLog(CookieUtil.class);		/**	 * 쿠키 정보 획득(URLDecoder로 value 값 디코딩 -UTF-8)	 * ex)	 * CookieUtil.getCookie("cookieName", request);	 * @param cookieName 쿠키 이름	 * @param request	 * @return	 * String	 */	public static String getCookie(String cookieName,HttpServletRequest request) {		try {			if(request.getCookies()==null){				return "";			}						Cookie[] cookies = request.getCookies();			for (Cookie cookie : cookies) {				if(cookie.getName().equals(cookieName)){					return URLDecoder.decode(cookie.getValue(),"UTF-8");				}			}						return "";		} catch (Exception e) {			if(log.isErrorEnabled()) {				log.error("CookieUtil.getCookie", e);			}			return "";		}			}			/**	 * 쿠키 정보 셋팅(URLEncoder로 value 값 인코딩 -UTF-8)	 * ex)	 * CookieUtil.setCookie("cookieName", "cookieValue", request, response);	 * @param cookieName 생성 쿠키 이름 	 * @param cookieValue 생성 쿠키 값	 * @param response	 */	public static void setCookie(String cookieName,String cookieValue,String cookieDomain,HttpServletResponse response) {		try {			if(log.isDebugEnabled()) {				log.debug("CookieUtil.setCookie [cookieDomain]"+cookieDomain+"[cookieName]"+cookieName+"[cookieValue]"+cookieValue);			}			CookieGenerator cookieGer = new CookieGenerator();			cookieGer.setCookieDomain(cookieDomain);			cookieGer.setCookieName(cookieName);			cookieGer.setCookieSecure(false);			cookieGer.addCookie(response, URLEncoder.encode(cookieValue, "UTF-8"));//cookie value 는 특수 문자 일부를 허용 안함.		} catch (Exception e) {			if(log.isErrorEnabled()) {				log.error("CookieUtil.setCookie", e);			}		}	}		/**	 * 쿠키 정보를 삭제 한다	 * ex)	 * CookieUtil.removeCookie("cookieName",request , response);	 * @param cookieName 삭제 쿠키 이름	 * @param request	 * @param response	 * void	 */	public static void removeCookie(String cookieName,String cookieDomain,HttpServletRequest request,HttpServletResponse response) {		try {			Cookie[] cookies = request.getCookies();			if (cookies != null && cookies.length > 0) {				for (int i = 0 ; i < cookies.length ; i++) {										if (cookies[i].getName().equals(cookieName)) {						CookieGenerator cookieGer = new CookieGenerator();						cookieGer.setCookieName(cookieName);						cookieGer.setCookieMaxAge(0);// setMaxAge() 메서드를 호출할때 인자 값으로 0을 주면 쿠키 삭제						cookieGer.setCookieDomain(cookieDomain);						cookieGer.addCookie(response, "");					}									}			}		} catch (Exception e) {			if(log.isErrorEnabled()) {				log.error("CookieUtil.removeCookie", e);			}		}	}}